Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, g, request\nfrom py2neo import Graph, Node, Relationship\nimport os\n\nimport requests\nimport json\n\nAPI_KEY = \"MKhOJFCcCXA2VYK5BiaJceZ18wCDtOHjzufAuNTT\"\n\n# 데이터베이스를 연결하는 부분\nurl = os.getenv(\"NEO4J_URI\", \"bolt://localhost:7687\")\nusername = os.getenv(\"NEO4J_USER\", \"neo4j\")\npassword = os.getenv(\"NEO4J_PASSWORD\", \"edacom\")\nneo4jVersion = os.getenv(\"NEO4J_VERSION\", \"4\")\ndatabase = os.getenv(\"NEO4J_DATABASE\", \"edacom\")\n\ngdb = Graph(url, auth=(\"neo4j\", password))\n\napp = Flask(__name__)\n\ndef get_db():\n    if not hasattr(g, 'neo4j_db'):\n        if neo4jVersion.startswith(\"4\"):\n            g.neo4j_db = gdb\n        else:\n            g.neo4j_db = gdb\n    return g.neo4j_db\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\n\n@app.route(\"/api/pwatts\")\ndef get_pwatts():\n    lat = request.args.get('lat')\n    lon = request.args.get('lon')\n    system_capacity = request.args.get('system_capacity')\n    azimuth = request.args.get('azimuth')\n    tilt = request.args.get('tilt')\n    array_type = request.args.get('array_type')\n    module_type = request.args.get('module_type')\n    losses = request.args.get('losses')\n\n    cities = {\n        'seoul': { 'lat': 37.48, 'lon': 126.55},\n        'busan': { 'lat': 35.55, 'lon': 129.32},\n        'incheon': {'lat': 37.48, 'lon': 126.55},\n        'daegu': { 'lat': 35.55, 'lon': 129.32},\n        'daejeon': {'lat': 35.13, 'lon': 126.92},\n    }\n\n    URL_PVWATTS6 = f\"https://developer.nrel.gov/api/pvwatts/v6.json?\"\n    for k, v in cities.items():\n        params = {'api_key': API_KEY,\n                  # 'address': , The address to use. Required if lat/lon or file_id not specified.\n                  # climate dataset: NREL Physical Solar Model (PSM) TMY from the NREL National Solar Radiation Database (NSRDB)\n                  # 'address': 'KWANGJU, REPUBLIC OF KOREA',\n                  'lat': cities[k]['lat'],\n                  'lon': cities[k]['lon'],\n                  'dataset': 'intl',\n                  'system_capacity': 4,  # Nameplate capacity (kW). 지정된 위치의 태양관 판의 크기라고 이야기할 수 있음\n                  'azimuth': 180,\n                  'tilt': 40,\n                  'array_type': 1,\n                  # 0: Fixed - Open rack, 1: Fixed - Roof Mounted 2: 1-Axis, 3: 1-Axis Backtracking 4: 2-Axis\n                  'module_type': 1,  # Module type. 0: Standard, 1: Premium, 2: Thin film\n                  'losses': 10  # System losses (percent).\n                  }\n\n        response = requests.get(URL_PVWATTS6, params=params)\n        json_obj = response.json()\n\n        print(json.dumps(json_obj, indent=4, sort_keys=True))\n        # 데이터베이스에 저장하면 될듯\n        put_graph1(json_obj, k)\n\n    return json.dumps(json_obj['outputs'], indent=1)\n\ndef put_graph1(json_obj, city):\n    conn = get_db()\n\n    ## 트랙젝션 생성(한번에 저장했다가 삽입)\n    tx = conn.begin()\n\n    STATION = \"Station\"\n    PVSYSTEM = \"PVSystem\"\n    ENERGY_ESTIMATE = \"EnergyEstimate\"\n\n    HAS_SYSTEM = Relationship.type(\"HAS_SYSTEM\")\n    HAS_ENERGY_ESTIMATE = Relationship.type(\"HAS_ENERGY_ESTIMATE\")\n\n    # 스테이션에 대한 정보 생성\n    json_st = json_obj['inputs']\n    n_station = Node(STATION, name=city, lat=json_st['lat'], lon=json_st['lon'])\n    n_pvsystem = Node(PVSYSTEM, name=f\"{city} pv\", array_type=json_st['array_type'], azimuth=json_st['azimuth'], losses=json_st['losses'], module_type=json_st['module_type'], system_capacity=json_st['system_capacity'], tilt=json_st['tilt'])\n    # 트랙젝션에 노드 와 관련된 관계를 추가\n    tx.create(HAS_SYSTEM(n_station, n_pvsystem))\n\n    # 통계치에 대한 정보 생성\n    json_est = json_obj['outputs']\n    n_energy_estimate = Node(ENERGY_ESTIMATE, name=\"estimates\", ac_annual=json_est['ac_annual'], ac_monthly=json_est['ac_monthly'], capacity_factor=json_est['capacity_factor'], dc_monthly=json_est['dc_monthly'], poa_monthly=json_est['poa_monthly'], solrad_annual=json_est['solrad_annual'], solrad_monthly=json_est['solrad_annual'])\n    tx.create(HAS_ENERGY_ESTIMATE(n_station, n_energy_estimate))\n\n    # 트렉젝션을 그래프 데이터베이스에 반영\n    tx.commit()\n\nif __name__ == '__main__':\n    app.run()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 4d63bf88a9cb790987113d5f5d23fae00beea786)
+++ b/app.py	(date 1626227106613)
@@ -92,7 +92,7 @@
 
     # 스테이션에 대한 정보 생성
     json_st = json_obj['inputs']
-    n_station = Node(STATION, name=city, lat=json_st['lat'], lon=json_st['lon'])
+    n_stati on = Node(STATION, name=city, lat=json_st['lat'], lon=json_st['lon'])
     n_pvsystem = Node(PVSYSTEM, name=f"{city} pv", array_type=json_st['array_type'], azimuth=json_st['azimuth'], losses=json_st['losses'], module_type=json_st['module_type'], system_capacity=json_st['system_capacity'], tilt=json_st['tilt'])
     # 트랙젝션에 노드 와 관련된 관계를 추가
     tx.create(HAS_SYSTEM(n_station, n_pvsystem))
